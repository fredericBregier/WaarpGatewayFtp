<?xml version="1.0" encoding="UTF-8"?>
<pmd-cpd>
<duplication lines="57" tokens="301">
<file line="58" path="J:\Git\fredericBregier\WaarpGatewayFtp\src\main\java\org\waarp\gateway\ftp\database\model\DbModelMysql.java"/>
<file line="51" path="J:\Git\fredericBregier\WaarpGatewayFtp\src\main\java\org\waarp\gateway\ftp\database\model\DbModelPostgresql.java"/>
<codefragment>
<![CDATA[
		String primaryKey = " PRIMARY KEY ";
		String notNull = " NOT NULL ";

		DbRequest request = new DbRequest(session);
		// TRANSLOG
		String action = createTableH2 + DbTransferLog.table + "(";
		DbTransferLog.Columns[] acolumns = DbTransferLog.Columns.values();
		for (int i = 0; i < acolumns.length; i++) {
			action += acolumns[i].name() +
					DBType.getType(DbTransferLog.dbTypes[i]) + notNull + ", ";
		}
		// Several columns for primary key
		action += " CONSTRAINT TRANSLOG_PK " + primaryKey + "(";
		for (int i = DbTransferLog.NBPRKEY; i > 1; i--) {
			action += acolumns[acolumns.length - i].name() + ",";
		}
		action += acolumns[acolumns.length - 1].name() + "))";
		System.out.println(action);
		try {
			request.query(action);
		} catch (WaarpDatabaseNoConnectionException e) {
			e.printStackTrace();
			return;
		} catch (WaarpDatabaseSqlException e) {
			e.printStackTrace();
			return;
		} finally {
			request.close();
		}
		// Index TRANSLOG
		action = "CREATE INDEX IDX_TRANSLOG ON " + DbTransferLog.table + "(";
		DbTransferLog.Columns[] icolumns = DbTransferLog.indexes;
		for (int i = 0; i < icolumns.length - 1; i++) {
			action += icolumns[i].name() + ", ";
		}
		action += icolumns[icolumns.length - 1].name() + ")";
		System.out.println(action);
		try {
			request.query(action);
		} catch (WaarpDatabaseNoConnectionException e) {
			e.printStackTrace();
			return;
		} catch (WaarpDatabaseSqlException e) {
			return;
		} finally {
			request.close();
		}

		// cptrunner
		/*
		 * # Table to handle any number of sequences: CREATE TABLE Sequences ( name VARCHAR(22) NOT
		 * NULL, seq INT UNSIGNED NOT NULL, # (or BIGINT) PRIMARY KEY name ); # Create a Sequence:
		 * INSERT INTO Sequences (name, seq) VALUES (?, 0); # Drop a Sequence: DELETE FROM Sequences
		 * WHERE name = ?; # Get a sequence number: UPDATE Sequences SET seq = LAST_INSERT_ID(seq +
		 * 1) WHERE name = ?; $seq = $db->LastInsertId();
		 */
		action = "CREATE TABLE Sequences (name VARCHAR(22) NOT NULL PRIMARY KEY," +
]]>
</codefragment>
</duplication>
<duplication lines="76" tokens="279">
<file line="825" path="J:\Git\fredericBregier\WaarpGatewayFtp\src\main\java\org\waarp\gateway\ftp\snmp\FtpPrivateMib.java"/>
<file line="941" path="J:\Git\fredericBregier\WaarpGatewayFtp\src\main\java\org\waarp\gateway\ftp\snmp\FtpPrivateMib.java"/>
<codefragment>
<![CDATA[
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_150,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_200,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_202,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_211,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_212,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_213,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_214,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_215,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_220,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_221,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_225,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_226,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_227,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_229,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_230,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_232,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_234,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_250,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_257,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_331,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_332,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_350;
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY) };

	/**
	 * Error part
	 * 
	 * @author Frederic Bregier
	 * 
	 */
	public static enum WaarpErrorValuesIndex {
]]>
</codefragment>
</duplication>
<duplication lines="70" tokens="277">
<file line="814" path="J:\Git\fredericBregier\WaarpGatewayFtp\src\main\java\org\waarp\gateway\ftp\snmp\FtpPrivateMib.java"/>
<file line="939" path="J:\Git\fredericBregier\WaarpGatewayFtp\src\main\java\org\waarp\gateway\ftp\snmp\FtpPrivateMib.java"/>
<codefragment>
<![CDATA[
	public static WaarpEntry[] WaarpDetailedValues = {
			// reply_000,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_110,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_120,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_125,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_150,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_200,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_202,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_211,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_212,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_213,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_214,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_215,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_220,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_221,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_225,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_226,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_227,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_229,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_230,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_232,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_234,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_250,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_257,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
]]>
</codefragment>
</duplication>
<duplication lines="68" tokens="275">
<file line="819" path="J:\Git\fredericBregier\WaarpGatewayFtp\src\main\java\org\waarp\gateway\ftp\snmp\FtpPrivateMib.java"/>
<file line="822" path="J:\Git\fredericBregier\WaarpGatewayFtp\src\main\java\org\waarp\gateway\ftp\snmp\FtpPrivateMib.java"/>
<file line="941" path="J:\Git\fredericBregier\WaarpGatewayFtp\src\main\java\org\waarp\gateway\ftp\snmp\FtpPrivateMib.java"/>
<codefragment>
<![CDATA[
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_120,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_125,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_150,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_200,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_202,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_211,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_212,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_213,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_214,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_215,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_220,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_221,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_225,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_226,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_227,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_229,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_230,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_232,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_234,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_250,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_257,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_331,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
]]>
</codefragment>
</duplication>
<duplication lines="65" tokens="263">
<file line="828" path="J:\Git\fredericBregier\WaarpGatewayFtp\src\main\java\org\waarp\gateway\ftp\snmp\FtpPrivateMib.java"/>
<file line="941" path="J:\Git\fredericBregier\WaarpGatewayFtp\src\main\java\org\waarp\gateway\ftp\snmp\FtpPrivateMib.java"/>
<codefragment>
<![CDATA[
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_200,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_202,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_211,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_212,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_213,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_214,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_215,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_220,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_221,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_225,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_226,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_227,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_229,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_230,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_232,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_234,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_250,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_257,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_331,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_332,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_350;
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY) };
]]>
</codefragment>
</duplication>
<duplication lines="65" tokens="263">
<file line="816" path="J:\Git\fredericBregier\WaarpGatewayFtp\src\main\java\org\waarp\gateway\ftp\snmp\FtpPrivateMib.java"/>
<file line="944" path="J:\Git\fredericBregier\WaarpGatewayFtp\src\main\java\org\waarp\gateway\ftp\snmp\FtpPrivateMib.java"/>
<codefragment>
<![CDATA[
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_110,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_120,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_125,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_150,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_200,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_202,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_211,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_212,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_213,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_214,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_215,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_220,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_221,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_225,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_226,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_227,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_229,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_230,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_232,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_234,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_250,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
]]>
</codefragment>
</duplication>
<duplication lines="72" tokens="260">
<file line="105" path="J:\Git\fredericBregier\WaarpGatewayFtp\src\main\java\org\waarp\gateway\ftp\database\model\DbModelH2.java"/>
<file line="101" path="J:\Git\fredericBregier\WaarpGatewayFtp\src\main\java\org\waarp\gateway\ftp\database\model\DbModelPostgresql.java"/>
<codefragment>
<![CDATA[
				" START WITH " + (DbConstant.ILLEGALVALUE + 1);
		System.out.println(action);
		try {
			request.query(action);
		} catch (WaarpDatabaseNoConnectionException e) {
			e.printStackTrace();
			return;
		} catch (WaarpDatabaseSqlException e) {
			e.printStackTrace();
			return;
		} finally {
			request.close();
		}
	}

	/*
	 * (non-Javadoc)
	 * @see org.waarp.openr66.databaseold.model.DbModel#resetSequence()
	 */
	@Override
	public void resetSequence(DbSession session, long newvalue)
			throws WaarpDatabaseNoConnectionException {
		String action = "ALTER SEQUENCE " + DbTransferLog.fieldseq +
				" RESTART WITH " + newvalue;
		DbRequest request = new DbRequest(session);
		try {
			request.query(action);
		} catch (WaarpDatabaseNoConnectionException e) {
			e.printStackTrace();
			return;
		} catch (WaarpDatabaseSqlException e) {
			e.printStackTrace();
			return;
		} finally {
			request.close();
		}
		System.out.println(action);
	}

	/*
	 * (non-Javadoc)
	 * @see org.waarp.openr66.databaseold.model.DbModel#nextSequence()
	 */
	@Override
	public long nextSequence(DbSession dbSession)
			throws WaarpDatabaseNoConnectionException,
			WaarpDatabaseSqlException, WaarpDatabaseNoDataException {
		long result = DbConstant.ILLEGALVALUE;
		String action = "SELECT NEXTVAL('" + DbTransferLog.fieldseq + "')";
		DbPreparedStatement preparedStatement = new DbPreparedStatement(
				dbSession);
		try {
			preparedStatement.createPrepareStatement(action);
			// Limit the search
			preparedStatement.executeQuery();
			if (preparedStatement.getNext()) {
				try {
					result = preparedStatement.getResultSet().getLong(1);
				} catch (SQLException e) {
					throw new WaarpDatabaseSqlException(e);
				}
				return result;
			} else {
				throw new WaarpDatabaseNoDataException(
						"No sequence found. Must be initialized first");
			}
		} finally {
			preparedStatement.realClose();
		}
	}

}
]]>
</codefragment>
</duplication>
<duplication lines="62" tokens="251">
<file line="831" path="J:\Git\fredericBregier\WaarpGatewayFtp\src\main\java\org\waarp\gateway\ftp\snmp\FtpPrivateMib.java"/>
<file line="941" path="J:\Git\fredericBregier\WaarpGatewayFtp\src\main\java\org\waarp\gateway\ftp\snmp\FtpPrivateMib.java"/>
<codefragment>
<![CDATA[
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_202,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_211,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_212,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_213,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_214,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_215,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_220,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_221,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_225,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_226,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_227,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_229,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_230,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_232,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_234,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_250,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_257,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_331,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_332,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_350;
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY) };
]]>
</codefragment>
</duplication>
<duplication lines="62" tokens="251">
<file line="816" path="J:\Git\fredericBregier\WaarpGatewayFtp\src\main\java\org\waarp\gateway\ftp\snmp\FtpPrivateMib.java"/>
<file line="947" path="J:\Git\fredericBregier\WaarpGatewayFtp\src\main\java\org\waarp\gateway\ftp\snmp\FtpPrivateMib.java"/>
<codefragment>
<![CDATA[
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_110,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_120,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_125,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_150,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_200,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_202,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_211,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_212,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_213,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_214,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_215,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_220,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_221,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_225,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_226,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_227,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_229,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_230,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_232,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_234,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
]]>
</codefragment>
</duplication>
<duplication lines="59" tokens="239">
<file line="834" path="J:\Git\fredericBregier\WaarpGatewayFtp\src\main\java\org\waarp\gateway\ftp\snmp\FtpPrivateMib.java"/>
<file line="941" path="J:\Git\fredericBregier\WaarpGatewayFtp\src\main\java\org\waarp\gateway\ftp\snmp\FtpPrivateMib.java"/>
<codefragment>
<![CDATA[
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_211,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_212,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_213,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_214,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_215,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_220,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_221,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_225,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_226,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_227,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_229,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_230,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_232,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_234,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_250,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_257,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_331,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_332,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_350;
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY) };
]]>
</codefragment>
</duplication>
<duplication lines="59" tokens="239">
<file line="816" path="J:\Git\fredericBregier\WaarpGatewayFtp\src\main\java\org\waarp\gateway\ftp\snmp\FtpPrivateMib.java"/>
<file line="950" path="J:\Git\fredericBregier\WaarpGatewayFtp\src\main\java\org\waarp\gateway\ftp\snmp\FtpPrivateMib.java"/>
<codefragment>
<![CDATA[
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_110,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_120,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_125,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_150,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_200,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_202,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_211,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_212,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_213,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_214,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_215,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_220,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_221,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_225,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_226,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_227,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_229,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_230,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_232,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
]]>
</codefragment>
</duplication>
<duplication lines="56" tokens="227">
<file line="837" path="J:\Git\fredericBregier\WaarpGatewayFtp\src\main\java\org\waarp\gateway\ftp\snmp\FtpPrivateMib.java"/>
<file line="941" path="J:\Git\fredericBregier\WaarpGatewayFtp\src\main\java\org\waarp\gateway\ftp\snmp\FtpPrivateMib.java"/>
<codefragment>
<![CDATA[
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_212,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_213,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_214,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_215,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_220,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_221,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_225,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_226,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_227,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_229,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_230,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_232,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_234,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_250,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_257,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_331,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_332,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_350;
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY) };
]]>
</codefragment>
</duplication>
<duplication lines="56" tokens="227">
<file line="816" path="J:\Git\fredericBregier\WaarpGatewayFtp\src\main\java\org\waarp\gateway\ftp\snmp\FtpPrivateMib.java"/>
<file line="953" path="J:\Git\fredericBregier\WaarpGatewayFtp\src\main\java\org\waarp\gateway\ftp\snmp\FtpPrivateMib.java"/>
<codefragment>
<![CDATA[
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_110,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_120,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_125,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_150,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_200,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_202,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_211,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_212,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_213,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_214,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_215,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_220,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_221,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_225,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_226,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_227,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_229,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_230,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
]]>
</codefragment>
</duplication>
<duplication lines="53" tokens="215">
<file line="840" path="J:\Git\fredericBregier\WaarpGatewayFtp\src\main\java\org\waarp\gateway\ftp\snmp\FtpPrivateMib.java"/>
<file line="941" path="J:\Git\fredericBregier\WaarpGatewayFtp\src\main\java\org\waarp\gateway\ftp\snmp\FtpPrivateMib.java"/>
<codefragment>
<![CDATA[
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_213,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_214,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_215,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_220,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_221,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_225,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_226,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_227,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_229,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_230,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_232,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_234,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_250,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_257,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_331,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_332,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_350;
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY) };
]]>
</codefragment>
</duplication>
<duplication lines="53" tokens="215">
<file line="816" path="J:\Git\fredericBregier\WaarpGatewayFtp\src\main\java\org\waarp\gateway\ftp\snmp\FtpPrivateMib.java"/>
<file line="956" path="J:\Git\fredericBregier\WaarpGatewayFtp\src\main\java\org\waarp\gateway\ftp\snmp\FtpPrivateMib.java"/>
<codefragment>
<![CDATA[
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_110,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_120,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_125,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_150,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_200,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_202,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_211,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_212,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_213,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_214,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_215,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_220,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_221,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_225,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_226,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_227,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_229,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
]]>
</codefragment>
</duplication>
<duplication lines="50" tokens="203">
<file line="843" path="J:\Git\fredericBregier\WaarpGatewayFtp\src\main\java\org\waarp\gateway\ftp\snmp\FtpPrivateMib.java"/>
<file line="941" path="J:\Git\fredericBregier\WaarpGatewayFtp\src\main\java\org\waarp\gateway\ftp\snmp\FtpPrivateMib.java"/>
<codefragment>
<![CDATA[
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_214,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_215,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_220,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_221,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_225,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_226,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_227,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_229,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_230,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_232,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_234,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_250,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_257,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_331,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_332,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_350;
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY) };
]]>
</codefragment>
</duplication>
<duplication lines="50" tokens="203">
<file line="816" path="J:\Git\fredericBregier\WaarpGatewayFtp\src\main\java\org\waarp\gateway\ftp\snmp\FtpPrivateMib.java"/>
<file line="959" path="J:\Git\fredericBregier\WaarpGatewayFtp\src\main\java\org\waarp\gateway\ftp\snmp\FtpPrivateMib.java"/>
<codefragment>
<![CDATA[
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_110,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_120,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_125,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_150,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_200,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_202,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_211,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_212,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_213,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_214,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_215,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_220,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_221,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_225,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_226,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_227,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
]]>
</codefragment>
</duplication>
<duplication lines="47" tokens="191">
<file line="846" path="J:\Git\fredericBregier\WaarpGatewayFtp\src\main\java\org\waarp\gateway\ftp\snmp\FtpPrivateMib.java"/>
<file line="941" path="J:\Git\fredericBregier\WaarpGatewayFtp\src\main\java\org\waarp\gateway\ftp\snmp\FtpPrivateMib.java"/>
<codefragment>
<![CDATA[
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_215,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_220,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_221,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_225,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_226,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_227,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_229,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_230,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_232,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_234,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_250,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_257,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_331,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_332,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_350;
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY) };
]]>
</codefragment>
</duplication>
<duplication lines="47" tokens="191">
<file line="816" path="J:\Git\fredericBregier\WaarpGatewayFtp\src\main\java\org\waarp\gateway\ftp\snmp\FtpPrivateMib.java"/>
<file line="962" path="J:\Git\fredericBregier\WaarpGatewayFtp\src\main\java\org\waarp\gateway\ftp\snmp\FtpPrivateMib.java"/>
<codefragment>
<![CDATA[
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_110,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_120,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_125,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_150,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_200,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_202,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_211,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_212,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_213,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_214,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_215,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_220,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_221,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_225,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// reply_226,
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
]]>
</codefragment>
</duplication>
<duplication lines="58" tokens="189">
<file line="715" path="J:\Git\fredericBregier\WaarpGatewayFtp\src\main\java\org\waarp\gateway\ftp\snmp\FtpPrivateMib.java"/>
<file line="846" path="J:\Git\fredericBregier\WaarpGatewayFtp\src\main\java\org\waarp\gateway\ftp\snmp\FtpPrivateMib.java"/>
<file line="962" path="J:\Git\fredericBregier\WaarpGatewayFtp\src\main\java\org\waarp\gateway\ftp\snmp\FtpPrivateMib.java"/>
<codefragment>
<![CDATA[
			new WaarpEntry(SMIConstants.SYNTAX_COUNTER32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// Bandwidth
			// applInboundBandwidthKBS
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// applOutboundBandwidthKBS
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// Overall status including past, future and current transfers
			// nbInfoUnknown
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// nbInfoNotUpdated
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// nbInfoInterrupted
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// nbInfoToSubmit
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// nbInfoError
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// nbInfoRunning
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// nbInfoDone
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// Current situation of all transfers, running or not
			// nbAllTransfer
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// memoryTotal
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// memoryFree
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// memoryUsed
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// nbThreads
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// nbNetworkConnection
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY) };

	/**
	 * Detailed part
	 * 
	 * @author Frederic Bregier
	 * 
	 */
	public static enum WaarpDetailedValuesIndex {
]]>
</codefragment>
</duplication>
<duplication lines="50" tokens="185">
<file line="715" path="J:\Git\fredericBregier\WaarpGatewayFtp\src\main\java\org\waarp\gateway\ftp\snmp\FtpPrivateMib.java"/>
<file line="816" path="J:\Git\fredericBregier\WaarpGatewayFtp\src\main\java\org\waarp\gateway\ftp\snmp\FtpPrivateMib.java"/>
<file line="819" path="J:\Git\fredericBregier\WaarpGatewayFtp\src\main\java\org\waarp\gateway\ftp\snmp\FtpPrivateMib.java"/>
<file line="822" path="J:\Git\fredericBregier\WaarpGatewayFtp\src\main\java\org\waarp\gateway\ftp\snmp\FtpPrivateMib.java"/>
<file line="825" path="J:\Git\fredericBregier\WaarpGatewayFtp\src\main\java\org\waarp\gateway\ftp\snmp\FtpPrivateMib.java"/>
<file line="828" path="J:\Git\fredericBregier\WaarpGatewayFtp\src\main\java\org\waarp\gateway\ftp\snmp\FtpPrivateMib.java"/>
<file line="831" path="J:\Git\fredericBregier\WaarpGatewayFtp\src\main\java\org\waarp\gateway\ftp\snmp\FtpPrivateMib.java"/>
<file line="834" path="J:\Git\fredericBregier\WaarpGatewayFtp\src\main\java\org\waarp\gateway\ftp\snmp\FtpPrivateMib.java"/>
<file line="837" path="J:\Git\fredericBregier\WaarpGatewayFtp\src\main\java\org\waarp\gateway\ftp\snmp\FtpPrivateMib.java"/>
<file line="840" path="J:\Git\fredericBregier\WaarpGatewayFtp\src\main\java\org\waarp\gateway\ftp\snmp\FtpPrivateMib.java"/>
<file line="843" path="J:\Git\fredericBregier\WaarpGatewayFtp\src\main\java\org\waarp\gateway\ftp\snmp\FtpPrivateMib.java"/>
<file line="941" path="J:\Git\fredericBregier\WaarpGatewayFtp\src\main\java\org\waarp\gateway\ftp\snmp\FtpPrivateMib.java"/>
<file line="944" path="J:\Git\fredericBregier\WaarpGatewayFtp\src\main\java\org\waarp\gateway\ftp\snmp\FtpPrivateMib.java"/>
<file line="947" path="J:\Git\fredericBregier\WaarpGatewayFtp\src\main\java\org\waarp\gateway\ftp\snmp\FtpPrivateMib.java"/>
<file line="950" path="J:\Git\fredericBregier\WaarpGatewayFtp\src\main\java\org\waarp\gateway\ftp\snmp\FtpPrivateMib.java"/>
<file line="953" path="J:\Git\fredericBregier\WaarpGatewayFtp\src\main\java\org\waarp\gateway\ftp\snmp\FtpPrivateMib.java"/>
<file line="956" path="J:\Git\fredericBregier\WaarpGatewayFtp\src\main\java\org\waarp\gateway\ftp\snmp\FtpPrivateMib.java"/>
<file line="959" path="J:\Git\fredericBregier\WaarpGatewayFtp\src\main\java\org\waarp\gateway\ftp\snmp\FtpPrivateMib.java"/>
<codefragment>
<![CDATA[
			new WaarpEntry(SMIConstants.SYNTAX_COUNTER32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// Bandwidth
			// applInboundBandwidthKBS
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// applOutboundBandwidthKBS
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// Overall status including past, future and current transfers
			// nbInfoUnknown
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// nbInfoNotUpdated
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// nbInfoInterrupted
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// nbInfoToSubmit
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// nbInfoError
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// nbInfoRunning
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// nbInfoDone
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// Current situation of all transfers, running or not
			// nbAllTransfer
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// memoryTotal
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// memoryFree
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// memoryUsed
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// nbThreads
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// nbNetworkConnection
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY) };
]]>
</codefragment>
</duplication>
<duplication lines="46" tokens="179">
<file line="719" path="J:\Git\fredericBregier\WaarpGatewayFtp\src\main\java\org\waarp\gateway\ftp\snmp\FtpPrivateMib.java"/>
<file line="816" path="J:\Git\fredericBregier\WaarpGatewayFtp\src\main\java\org\waarp\gateway\ftp\snmp\FtpPrivateMib.java"/>
<file line="849" path="J:\Git\fredericBregier\WaarpGatewayFtp\src\main\java\org\waarp\gateway\ftp\snmp\FtpPrivateMib.java"/>
<file line="941" path="J:\Git\fredericBregier\WaarpGatewayFtp\src\main\java\org\waarp\gateway\ftp\snmp\FtpPrivateMib.java"/>
<file line="965" path="J:\Git\fredericBregier\WaarpGatewayFtp\src\main\java\org\waarp\gateway\ftp\snmp\FtpPrivateMib.java"/>
<codefragment>
<![CDATA[
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// applOutboundBandwidthKBS
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// Overall status including past, future and current transfers
			// nbInfoUnknown
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// nbInfoNotUpdated
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// nbInfoInterrupted
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// nbInfoToSubmit
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// nbInfoError
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// nbInfoRunning
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// nbInfoDone
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// Current situation of all transfers, running or not
			// nbAllTransfer
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// memoryTotal
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// memoryFree
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// memoryUsed
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// nbThreads
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// nbNetworkConnection
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY) };
]]>
</codefragment>
</duplication>
<duplication lines="47" tokens="173">
<file line="715" path="J:\Git\fredericBregier\WaarpGatewayFtp\src\main\java\org\waarp\gateway\ftp\snmp\FtpPrivateMib.java"/>
<file line="849" path="J:\Git\fredericBregier\WaarpGatewayFtp\src\main\java\org\waarp\gateway\ftp\snmp\FtpPrivateMib.java"/>
<file line="965" path="J:\Git\fredericBregier\WaarpGatewayFtp\src\main\java\org\waarp\gateway\ftp\snmp\FtpPrivateMib.java"/>
<codefragment>
<![CDATA[
			new WaarpEntry(SMIConstants.SYNTAX_COUNTER32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// Bandwidth
			// applInboundBandwidthKBS
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// applOutboundBandwidthKBS
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// Overall status including past, future and current transfers
			// nbInfoUnknown
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// nbInfoNotUpdated
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// nbInfoInterrupted
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// nbInfoToSubmit
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// nbInfoError
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// nbInfoRunning
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// nbInfoDone
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// Current situation of all transfers, running or not
			// nbAllTransfer
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// memoryTotal
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// memoryFree
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// memoryUsed
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// nbThreads
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
]]>
</codefragment>
</duplication>
<duplication lines="43" tokens="167">
<file line="722" path="J:\Git\fredericBregier\WaarpGatewayFtp\src\main\java\org\waarp\gateway\ftp\snmp\FtpPrivateMib.java"/>
<file line="816" path="J:\Git\fredericBregier\WaarpGatewayFtp\src\main\java\org\waarp\gateway\ftp\snmp\FtpPrivateMib.java"/>
<file line="852" path="J:\Git\fredericBregier\WaarpGatewayFtp\src\main\java\org\waarp\gateway\ftp\snmp\FtpPrivateMib.java"/>
<file line="941" path="J:\Git\fredericBregier\WaarpGatewayFtp\src\main\java\org\waarp\gateway\ftp\snmp\FtpPrivateMib.java"/>
<file line="968" path="J:\Git\fredericBregier\WaarpGatewayFtp\src\main\java\org\waarp\gateway\ftp\snmp\FtpPrivateMib.java"/>
<codefragment>
<![CDATA[
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// Overall status including past, future and current transfers
			// nbInfoUnknown
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// nbInfoNotUpdated
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// nbInfoInterrupted
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// nbInfoToSubmit
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// nbInfoError
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// nbInfoRunning
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// nbInfoDone
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// Current situation of all transfers, running or not
			// nbAllTransfer
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// memoryTotal
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// memoryFree
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// memoryUsed
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// nbThreads
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// nbNetworkConnection
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY) };
]]>
</codefragment>
</duplication>
<duplication lines="44" tokens="161">
<file line="715" path="J:\Git\fredericBregier\WaarpGatewayFtp\src\main\java\org\waarp\gateway\ftp\snmp\FtpPrivateMib.java"/>
<file line="852" path="J:\Git\fredericBregier\WaarpGatewayFtp\src\main\java\org\waarp\gateway\ftp\snmp\FtpPrivateMib.java"/>
<file line="968" path="J:\Git\fredericBregier\WaarpGatewayFtp\src\main\java\org\waarp\gateway\ftp\snmp\FtpPrivateMib.java"/>
<codefragment>
<![CDATA[
			new WaarpEntry(SMIConstants.SYNTAX_COUNTER32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// Bandwidth
			// applInboundBandwidthKBS
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// applOutboundBandwidthKBS
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// Overall status including past, future and current transfers
			// nbInfoUnknown
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// nbInfoNotUpdated
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// nbInfoInterrupted
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// nbInfoToSubmit
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// nbInfoError
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// nbInfoRunning
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// nbInfoDone
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// Current situation of all transfers, running or not
			// nbAllTransfer
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// memoryTotal
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// memoryFree
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// memoryUsed
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
]]>
</codefragment>
</duplication>
<duplication lines="39" tokens="155">
<file line="726" path="J:\Git\fredericBregier\WaarpGatewayFtp\src\main\java\org\waarp\gateway\ftp\snmp\FtpPrivateMib.java"/>
<file line="816" path="J:\Git\fredericBregier\WaarpGatewayFtp\src\main\java\org\waarp\gateway\ftp\snmp\FtpPrivateMib.java"/>
<file line="855" path="J:\Git\fredericBregier\WaarpGatewayFtp\src\main\java\org\waarp\gateway\ftp\snmp\FtpPrivateMib.java"/>
<file line="941" path="J:\Git\fredericBregier\WaarpGatewayFtp\src\main\java\org\waarp\gateway\ftp\snmp\FtpPrivateMib.java"/>
<file line="971" path="J:\Git\fredericBregier\WaarpGatewayFtp\src\main\java\org\waarp\gateway\ftp\snmp\FtpPrivateMib.java"/>
<codefragment>
<![CDATA[
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// nbInfoNotUpdated
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// nbInfoInterrupted
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// nbInfoToSubmit
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// nbInfoError
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// nbInfoRunning
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// nbInfoDone
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// Current situation of all transfers, running or not
			// nbAllTransfer
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// memoryTotal
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// memoryFree
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// memoryUsed
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// nbThreads
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// nbNetworkConnection
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY) };
]]>
</codefragment>
</duplication>
<duplication lines="41" tokens="149">
<file line="715" path="J:\Git\fredericBregier\WaarpGatewayFtp\src\main\java\org\waarp\gateway\ftp\snmp\FtpPrivateMib.java"/>
<file line="855" path="J:\Git\fredericBregier\WaarpGatewayFtp\src\main\java\org\waarp\gateway\ftp\snmp\FtpPrivateMib.java"/>
<file line="971" path="J:\Git\fredericBregier\WaarpGatewayFtp\src\main\java\org\waarp\gateway\ftp\snmp\FtpPrivateMib.java"/>
<codefragment>
<![CDATA[
			new WaarpEntry(SMIConstants.SYNTAX_COUNTER32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// Bandwidth
			// applInboundBandwidthKBS
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// applOutboundBandwidthKBS
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// Overall status including past, future and current transfers
			// nbInfoUnknown
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// nbInfoNotUpdated
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// nbInfoInterrupted
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// nbInfoToSubmit
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// nbInfoError
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// nbInfoRunning
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// nbInfoDone
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// Current situation of all transfers, running or not
			// nbAllTransfer
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// memoryTotal
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// memoryFree
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
]]>
</codefragment>
</duplication>
<duplication lines="15" tokens="148">
<file line="765" path="J:\Git\fredericBregier\WaarpGatewayFtp\src\main\java\org\waarp\gateway\ftp\database\data\DbTransferLog.java"/>
<file line="799" path="J:\Git\fredericBregier\WaarpGatewayFtp\src\main\java\org\waarp\gateway\ftp\database\data\DbTransferLog.java"/>
<codefragment>
<![CDATA[
			DbSession session, boolean in)
			throws WaarpDatabaseNoConnectionException, WaarpDatabaseSqlException {
		String request = "SELECT COUNT(" + Columns.SPECIALID.name() + ") FROM " + table;
		String inCond = null;
		if (in) {
			inCond = " (" + Columns.MODETRANS.name() + " = '" + FtpCommandCode.APPE.name()
					+ "' OR " +
					Columns.MODETRANS.name() + " = '" + FtpCommandCode.STOR.name() + "' OR " +
					Columns.MODETRANS.name() + " = '" + FtpCommandCode.STOU.name() + "') ";
		} else {
			inCond = " (" + Columns.MODETRANS.name() + " = '" + FtpCommandCode.RETR.name() + "') ";
		}
		request += " WHERE " + inCond;
		request += " AND " + getLimitWhereCondition() + " ";
		request += " AND " + Columns.STARTTRANS.name() + " >= ? ";
]]>
</codefragment>
</duplication>
<duplication lines="36" tokens="143">
<file line="729" path="J:\Git\fredericBregier\WaarpGatewayFtp\src\main\java\org\waarp\gateway\ftp\snmp\FtpPrivateMib.java"/>
<file line="816" path="J:\Git\fredericBregier\WaarpGatewayFtp\src\main\java\org\waarp\gateway\ftp\snmp\FtpPrivateMib.java"/>
<file line="858" path="J:\Git\fredericBregier\WaarpGatewayFtp\src\main\java\org\waarp\gateway\ftp\snmp\FtpPrivateMib.java"/>
<file line="941" path="J:\Git\fredericBregier\WaarpGatewayFtp\src\main\java\org\waarp\gateway\ftp\snmp\FtpPrivateMib.java"/>
<file line="974" path="J:\Git\fredericBregier\WaarpGatewayFtp\src\main\java\org\waarp\gateway\ftp\snmp\FtpPrivateMib.java"/>
<codefragment>
<![CDATA[
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// nbInfoInterrupted
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// nbInfoToSubmit
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// nbInfoError
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// nbInfoRunning
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// nbInfoDone
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// Current situation of all transfers, running or not
			// nbAllTransfer
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// memoryTotal
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// memoryFree
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// memoryUsed
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// nbThreads
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// nbNetworkConnection
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY) };
]]>
</codefragment>
</duplication>
<duplication lines="26" tokens="138">
<file line="80" path="J:\Git\fredericBregier\WaarpGatewayFtp\src\main\java\org\waarp\gateway\ftp\database\model\DbModelOracle.java"/>
<file line="76" path="J:\Git\fredericBregier\WaarpGatewayFtp\src\main\java\org\waarp\gateway\ftp\database\model\DbModelPostgresql.java"/>
<codefragment>
<![CDATA[
			return;
		} finally {
			request.close();
		}
		// Index TRANSLOG
		action = "CREATE INDEX IDX_TRANSLOG ON " + DbTransferLog.table + "(";
		DbTransferLog.Columns[] icolumns = DbTransferLog.indexes;
		for (int i = 0; i < icolumns.length - 1; i++) {
			action += icolumns[i].name() + ", ";
		}
		action += icolumns[icolumns.length - 1].name() + ")";
		System.out.println(action);
		try {
			request.query(action);
		} catch (WaarpDatabaseNoConnectionException e) {
			e.printStackTrace();
			return;
		} catch (WaarpDatabaseSqlException e) {
			return;
		} finally {
			request.close();
		}

		// cptrunner
		action = "CREATE SEQUENCE " + DbTransferLog.fieldseq +
				" MINVALUE " + (DbConstant.ILLEGALVALUE + 1) +
]]>
</codefragment>
</duplication>
<duplication lines="38" tokens="137">
<file line="715" path="J:\Git\fredericBregier\WaarpGatewayFtp\src\main\java\org\waarp\gateway\ftp\snmp\FtpPrivateMib.java"/>
<file line="858" path="J:\Git\fredericBregier\WaarpGatewayFtp\src\main\java\org\waarp\gateway\ftp\snmp\FtpPrivateMib.java"/>
<file line="974" path="J:\Git\fredericBregier\WaarpGatewayFtp\src\main\java\org\waarp\gateway\ftp\snmp\FtpPrivateMib.java"/>
<codefragment>
<![CDATA[
			new WaarpEntry(SMIConstants.SYNTAX_COUNTER32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// Bandwidth
			// applInboundBandwidthKBS
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// applOutboundBandwidthKBS
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// Overall status including past, future and current transfers
			// nbInfoUnknown
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// nbInfoNotUpdated
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// nbInfoInterrupted
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// nbInfoToSubmit
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// nbInfoError
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// nbInfoRunning
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// nbInfoDone
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// Current situation of all transfers, running or not
			// nbAllTransfer
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// memoryTotal
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
]]>
</codefragment>
</duplication>
<duplication lines="33" tokens="131">
<file line="732" path="J:\Git\fredericBregier\WaarpGatewayFtp\src\main\java\org\waarp\gateway\ftp\snmp\FtpPrivateMib.java"/>
<file line="816" path="J:\Git\fredericBregier\WaarpGatewayFtp\src\main\java\org\waarp\gateway\ftp\snmp\FtpPrivateMib.java"/>
<file line="861" path="J:\Git\fredericBregier\WaarpGatewayFtp\src\main\java\org\waarp\gateway\ftp\snmp\FtpPrivateMib.java"/>
<file line="941" path="J:\Git\fredericBregier\WaarpGatewayFtp\src\main\java\org\waarp\gateway\ftp\snmp\FtpPrivateMib.java"/>
<file line="977" path="J:\Git\fredericBregier\WaarpGatewayFtp\src\main\java\org\waarp\gateway\ftp\snmp\FtpPrivateMib.java"/>
<codefragment>
<![CDATA[
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// nbInfoToSubmit
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// nbInfoError
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// nbInfoRunning
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// nbInfoDone
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// Current situation of all transfers, running or not
			// nbAllTransfer
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// memoryTotal
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// memoryFree
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// memoryUsed
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// nbThreads
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// nbNetworkConnection
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY) };
]]>
</codefragment>
</duplication>
<duplication lines="13" tokens="129">
<file line="59" path="J:\Git\fredericBregier\WaarpGatewayFtp\src\main\java\org\waarp\gateway\ftp\database\model\DbModelH2.java"/>
<file line="63" path="J:\Git\fredericBregier\WaarpGatewayFtp\src\main\java\org\waarp\gateway\ftp\database\model\DbModelMysql.java"/>
<file line="56" path="J:\Git\fredericBregier\WaarpGatewayFtp\src\main\java\org\waarp\gateway\ftp\database\model\DbModelPostgresql.java"/>
<codefragment>
<![CDATA[
		String action = createTableH2 + DbTransferLog.table + "(";
		DbTransferLog.Columns[] acolumns = DbTransferLog.Columns.values();
		for (int i = 0; i < acolumns.length; i++) {
			action += acolumns[i].name() +
					DBType.getType(DbTransferLog.dbTypes[i]) + notNull + ", ";
		}
		// Several columns for primary key
		action += " CONSTRAINT TRANSLOG_PK " + primaryKey + "(";
		for (int i = DbTransferLog.NBPRKEY; i > 1; i--) {
			action += acolumns[acolumns.length - i].name() + ",";
		}
		action += acolumns[acolumns.length - 1].name() + "))";
		System.out.println(action);
]]>
</codefragment>
</duplication>
<duplication lines="35" tokens="125">
<file line="715" path="J:\Git\fredericBregier\WaarpGatewayFtp\src\main\java\org\waarp\gateway\ftp\snmp\FtpPrivateMib.java"/>
<file line="861" path="J:\Git\fredericBregier\WaarpGatewayFtp\src\main\java\org\waarp\gateway\ftp\snmp\FtpPrivateMib.java"/>
<file line="977" path="J:\Git\fredericBregier\WaarpGatewayFtp\src\main\java\org\waarp\gateway\ftp\snmp\FtpPrivateMib.java"/>
<codefragment>
<![CDATA[
			new WaarpEntry(SMIConstants.SYNTAX_COUNTER32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// Bandwidth
			// applInboundBandwidthKBS
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// applOutboundBandwidthKBS
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// Overall status including past, future and current transfers
			// nbInfoUnknown
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// nbInfoNotUpdated
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// nbInfoInterrupted
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// nbInfoToSubmit
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// nbInfoError
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// nbInfoRunning
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// nbInfoDone
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// Current situation of all transfers, running or not
			// nbAllTransfer
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
]]>
</codefragment>
</duplication>
<duplication lines="32" tokens="123">
<file line="83" path="J:\Git\fredericBregier\WaarpGatewayFtp\src\main\java\org\waarp\gateway\ftp\database\model\DbModelMysql.java"/>
<file line="80" path="J:\Git\fredericBregier\WaarpGatewayFtp\src\main\java\org\waarp\gateway\ftp\database\model\DbModelOracle.java"/>
<codefragment>
<![CDATA[
			return;
		} finally {
			request.close();
		}
		// Index TRANSLOG
		action = "CREATE INDEX IDX_TRANSLOG ON " + DbTransferLog.table + "(";
		DbTransferLog.Columns[] icolumns = DbTransferLog.indexes;
		for (int i = 0; i < icolumns.length - 1; i++) {
			action += icolumns[i].name() + ", ";
		}
		action += icolumns[icolumns.length - 1].name() + ")";
		System.out.println(action);
		try {
			request.query(action);
		} catch (WaarpDatabaseNoConnectionException e) {
			e.printStackTrace();
			return;
		} catch (WaarpDatabaseSqlException e) {
			return;
		} finally {
			request.close();
		}

		// cptrunner
		/*
		 * # Table to handle any number of sequences: CREATE TABLE Sequences ( name VARCHAR(22) NOT
		 * NULL, seq INT UNSIGNED NOT NULL, # (or BIGINT) PRIMARY KEY name ); # Create a Sequence:
		 * INSERT INTO Sequences (name, seq) VALUES (?, 0); # Drop a Sequence: DELETE FROM Sequences
		 * WHERE name = ?; # Get a sequence number: UPDATE Sequences SET seq = LAST_INSERT_ID(seq +
		 * 1) WHERE name = ?; $seq = $db->LastInsertId();
		 */
		action = "CREATE TABLE Sequences (name VARCHAR(22) NOT NULL PRIMARY KEY," +
]]>
</codefragment>
</duplication>
<duplication lines="30" tokens="119">
<file line="735" path="J:\Git\fredericBregier\WaarpGatewayFtp\src\main\java\org\waarp\gateway\ftp\snmp\FtpPrivateMib.java"/>
<file line="816" path="J:\Git\fredericBregier\WaarpGatewayFtp\src\main\java\org\waarp\gateway\ftp\snmp\FtpPrivateMib.java"/>
<file line="864" path="J:\Git\fredericBregier\WaarpGatewayFtp\src\main\java\org\waarp\gateway\ftp\snmp\FtpPrivateMib.java"/>
<file line="941" path="J:\Git\fredericBregier\WaarpGatewayFtp\src\main\java\org\waarp\gateway\ftp\snmp\FtpPrivateMib.java"/>
<file line="980" path="J:\Git\fredericBregier\WaarpGatewayFtp\src\main\java\org\waarp\gateway\ftp\snmp\FtpPrivateMib.java"/>
<codefragment>
<![CDATA[
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// nbInfoError
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// nbInfoRunning
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// nbInfoDone
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// Current situation of all transfers, running or not
			// nbAllTransfer
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// memoryTotal
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// memoryFree
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// memoryUsed
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// nbThreads
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// nbNetworkConnection
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY) };
]]>
</codefragment>
</duplication>
<duplication lines="31" tokens="113">
<file line="715" path="J:\Git\fredericBregier\WaarpGatewayFtp\src\main\java\org\waarp\gateway\ftp\snmp\FtpPrivateMib.java"/>
<file line="864" path="J:\Git\fredericBregier\WaarpGatewayFtp\src\main\java\org\waarp\gateway\ftp\snmp\FtpPrivateMib.java"/>
<file line="980" path="J:\Git\fredericBregier\WaarpGatewayFtp\src\main\java\org\waarp\gateway\ftp\snmp\FtpPrivateMib.java"/>
<codefragment>
<![CDATA[
			new WaarpEntry(SMIConstants.SYNTAX_COUNTER32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// Bandwidth
			// applInboundBandwidthKBS
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// applOutboundBandwidthKBS
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// Overall status including past, future and current transfers
			// nbInfoUnknown
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// nbInfoNotUpdated
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// nbInfoInterrupted
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// nbInfoToSubmit
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// nbInfoError
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// nbInfoRunning
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// nbInfoDone
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
]]>
</codefragment>
</duplication>
<duplication lines="20" tokens="110">
<file line="85" path="J:\Git\fredericBregier\WaarpGatewayFtp\src\main\java\org\waarp\gateway\ftp\database\model\DbModelH2.java"/>
<file line="88" path="J:\Git\fredericBregier\WaarpGatewayFtp\src\main\java\org\waarp\gateway\ftp\database\model\DbModelMysql.java"/>
<file line="85" path="J:\Git\fredericBregier\WaarpGatewayFtp\src\main\java\org\waarp\gateway\ftp\database\model\DbModelOracle.java"/>
<file line="81" path="J:\Git\fredericBregier\WaarpGatewayFtp\src\main\java\org\waarp\gateway\ftp\database\model\DbModelPostgresql.java"/>
<codefragment>
<![CDATA[
		action = "CREATE INDEX IF NOT EXISTS IDX_TRANSLOG ON " + DbTransferLog.table + "(";
		DbTransferLog.Columns[] icolumns = DbTransferLog.indexes;
		for (int i = 0; i < icolumns.length - 1; i++) {
			action += icolumns[i].name() + ", ";
		}
		action += icolumns[icolumns.length - 1].name() + ")";
		System.out.println(action);
		try {
			request.query(action);
		} catch (WaarpDatabaseNoConnectionException e) {
			e.printStackTrace();
			return;
		} catch (WaarpDatabaseSqlException e) {
			return;
		} finally {
			request.close();
		}

		// cptrunner
		action = "CREATE SEQUENCE IF NOT EXISTS " + DbTransferLog.fieldseq +
]]>
</codefragment>
</duplication>
<duplication lines="27" tokens="107">
<file line="738" path="J:\Git\fredericBregier\WaarpGatewayFtp\src\main\java\org\waarp\gateway\ftp\snmp\FtpPrivateMib.java"/>
<file line="816" path="J:\Git\fredericBregier\WaarpGatewayFtp\src\main\java\org\waarp\gateway\ftp\snmp\FtpPrivateMib.java"/>
<file line="867" path="J:\Git\fredericBregier\WaarpGatewayFtp\src\main\java\org\waarp\gateway\ftp\snmp\FtpPrivateMib.java"/>
<file line="941" path="J:\Git\fredericBregier\WaarpGatewayFtp\src\main\java\org\waarp\gateway\ftp\snmp\FtpPrivateMib.java"/>
<file line="983" path="J:\Git\fredericBregier\WaarpGatewayFtp\src\main\java\org\waarp\gateway\ftp\snmp\FtpPrivateMib.java"/>
<codefragment>
<![CDATA[
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// nbInfoRunning
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// nbInfoDone
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// Current situation of all transfers, running or not
			// nbAllTransfer
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// memoryTotal
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// memoryFree
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// memoryUsed
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// nbThreads
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// nbNetworkConnection
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY) };
]]>
</codefragment>
</duplication>
<duplication lines="28" tokens="101">
<file line="715" path="J:\Git\fredericBregier\WaarpGatewayFtp\src\main\java\org\waarp\gateway\ftp\snmp\FtpPrivateMib.java"/>
<file line="867" path="J:\Git\fredericBregier\WaarpGatewayFtp\src\main\java\org\waarp\gateway\ftp\snmp\FtpPrivateMib.java"/>
<file line="983" path="J:\Git\fredericBregier\WaarpGatewayFtp\src\main\java\org\waarp\gateway\ftp\snmp\FtpPrivateMib.java"/>
<codefragment>
<![CDATA[
			new WaarpEntry(SMIConstants.SYNTAX_COUNTER32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// Bandwidth
			// applInboundBandwidthKBS
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// applOutboundBandwidthKBS
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// Overall status including past, future and current transfers
			// nbInfoUnknown
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// nbInfoNotUpdated
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// nbInfoInterrupted
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// nbInfoToSubmit
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// nbInfoError
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
			// nbInfoRunning
			new WaarpEntry(SMIConstants.SYNTAX_GAUGE32,
					MOAccessImpl.ACCESS_READ_ONLY),
]]>
</codefragment>
</duplication>
<duplication lines="11" tokens="100">
<file line="365" path="J:\Git\fredericBregier\WaarpGatewayFtp\src\main\java\org\waarp\gateway\ftp\adminssl\HttpSslHandler.java"/>
<file line="413" path="J:\Git\fredericBregier\WaarpGatewayFtp\src\main\java\org\waarp\gateway\ftp\adminssl\HttpSslHandler.java"/>
<codefragment>
<![CDATA[
			String system = REQUEST.Rule.readFileUnique();
			StringBuilder builder = new StringBuilder(system);
			CommandExecutor exec = AbstractExecutor.getCommandExecutor();
			WaarpStringUtils.replace(builder, "XXXSTCXXX",
					exec.getStorType() + " " + exec.pstorCMD);
			WaarpStringUtils.replace(builder, "XXXSTDXXX",
					Long.toString(exec.pstorDelay));
			WaarpStringUtils.replace(builder, "XXXRTCXXX",
					exec.getRetrType() + " " + exec.pretrCMD);
			WaarpStringUtils.replace(builder, "XXXRTDXXX",
					Long.toString(exec.pretrDelay));
]]>
</codefragment>
</duplication>
</pmd-cpd>