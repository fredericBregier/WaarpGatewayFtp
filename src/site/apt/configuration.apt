GoldenGateFtp Exec Configuration

*How to configure GoldenGate Ftp Exec

  In the zip distribution <GoldenGateFtpExec-X.Y.Z-dist.zip> (available at sourceforge for download),
  you will find an extra directory named: <src/main/config> where two examples files are:
  <config.xml> and <authent.xml>.
  Those two files are related to the simple implementation of the Ftp Server.

  The first one (config.xml) specifies the general behavior:

  * server password (for admin functions)

  * server port, home directory, bandwidth limitation

  * server special configuration like threads number, timeout of connection, deleteOnAbort,
    usenio, fastmd5, blocksize, rangeport and the localization of the authentfile (second file)

  []

  The second one (authent.xml) is a simple authentication file containing user definition
  (user name, password, account, admin status).

*How to run GoldenGate Ftp Exec

  It can be started like:

  java ... classpath and jvm settings ... <goldengate.ftp.exec.FtpServer> <src/main/config/config.xml>

  Note that in the classpath you need :

  *External jars:

    *{{{http://www.jboss.org/netty/index.html}Netty}}

    *{{{http://commons.apache.org/io/}Apache-Common-IO}}

    *{{{http://www.dom4j.org/}DOM4J}}

    *{{{http://jaxen.codehaus.org/}Jaxen}}

    *{{{http://www.slf4j.org/}SLF4J}}

    *{{{http://logback.qos.ch/}Logback}}

  *Goldengate jars:

    *<NettyExtension>

    *<GoldenGateDigest>

    *<GoldenGateCommon>

    *<GoldenGateFtp-Core>

    *<GoldenGateFtp-Filesystem>

    *<GoldengateFtpExec> of course

  []

  Some of them can be replaced if you change the implementation (Common IO is optional,
  Dom4J and Jaxen are only used if XML configuration file is used, SLF4J and Logback could be
  replaced with other logger framework, see the <goldengate.common.logging> from <GoldenGateCommon>
  where JDK is also supported, others can easily be supported).

  To shutdown the service, either you do a CTRL-C or better if Unix (but not IBM JDK)

----------------------------------------
  kill -SIGUSR1 <processID>
----------------------------------------

  or even better you connect as an admin user and execute the special command:

----------------------------------------
  internalshutdown <password>
----------------------------------------

  where the password is the one in the <config.xml> for admin actions.

  For instance, using FTP Client from windows you have to type the command <quote> to pass
  a non standard command to the FTP Server.

----------------------------------------
  >quote internalshutdown <password>
----------------------------------------

  Note that this FTP Server can be used as a simple one, but also for more complicated cases.
  It is in the middle of a self FTP server (<simpleimpl> package) and a framework to implement
  its own FTP service, which is the main reason of this project since I've not found any other
  open source  implementations allowing to have pre or post actions on transfers or commands.

  Hope this helps a bit... If you have any questions, remarks, just ask!
